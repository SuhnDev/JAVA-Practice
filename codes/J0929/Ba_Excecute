import java.util.Scanner;

public class Ba_Excecute {
	private static Scanner sc = new Scanner(System.in); //스캐너 생성
    private static String ex = "잘못된 입력입니다."; //반복되는 오류 메시지 변수로 생성
    
    private static String prompt(String msg) { //사용자로부터 입력을 받아오는 메소드
    	System.out.print(msg); //매개변수 msg 변수로 받아온 텍스트 출력
    	return sc.nextLine().trim(); //trim()을 이용해서 공백을 제외하고 입력받은 값을 리턴
    }
    
    private static int selectAccount(BankAccount[] accts) { //플레이어가 접근할 계좌를 선택하는 메소드
    	System.out.println("----------- 현재 계좌 목록 -----------");
    	for(int i = 0; i <accts.length; i++) //계좌 목록 출력 (반복문으로)
    		System.out.printf("[%d] %s\n",i+1,accts[i]);
    	System.out.println("-----------------------------------");
    	String in = prompt("접근할 계좌 번호를 입력 (q/Q: 종료)\n>> "); //prompt 메소드 이용하여 String 변수 in 값 할당
    	
    	if(in.isEmpty()) { //isEmpty() 메소드를 이용하여 공백인지 확인 및 오류메시지 출력
    		System.out.println(ex);
    		return -2; //다시 실행 값 (-2) 리턴
    	}
    	
    	char c = in.charAt(0); //in의 첫번째 글자를 c에 할당
    	if(c=='q'||c=='Q') //c 와 'q' 'Q' 가 같은지 비교
    		return -1; //프로그램 종료 값 (-1) 리턴
    	
    	try { //try catch 예외처리 구문으로 입력값이 숫자가 아닌 경우 예외처리
    		int n = Integer.parseInt(in); //in 문자열을 숫자로 바꿈
    		if (1<=n && n <= accts.length) //n값이 1보다 크거나 같고 계좌 갯수보다 작거나 같다면
    			return n - 1; //인덱스를 사용하기 위해 입력받은 값-1을 리턴
    	} catch (NumberFormatException ignored) {} //예외 발생시
    	System.out.println(ex); //오류 메시지 출력
    	return -2; //다시 실행 값 (-2) 리턴
    }
    
    private static int menu() { //플레이어에게 보여주는 메뉴 UI 메소드
    	System.out.println("\n----------- 이용 가능 메뉴 -----------");
        System.out.println("입금 : 1");
        System.out.println("출금 : 2");
        System.out.println("통장정리(잔액조회) : 3");
        System.out.println("뒤로가기 : 0");
        System.out.println("-------------------------------------");
        String in = prompt("메뉴를 선택하시오. (정수로만 입력)\n>> "); //prompt 메소드 이용하여 in 변수에 문자열 입력받음
        try { //문자열 예외처리
            return Integer.parseInt(in); //in 문자열을 숫자로 바꿔 리턴
        } catch (NumberFormatException e) { //예외 발생시
            System.out.println(ex); //오류 메시지 출력
            return -1; //프로그램 종료 값 (-1) 리턴
        }
    }
    
    private static Integer readAmount(String label) { //입력값 음수처리
        String in = prompt(label + " 금액을 입력하세요 (정수, 단위: 원)\n>> "); //prompt 메소드 이용하여 in 변수에 문자열 입력받음
        try { //문자열 예외처리
            int amount = Integer.parseInt(in); //in 문자열 숫자로 바꿔 amount에 할당
            if (amount <= 0) { //amount 정수값이 0보다 작거나 같으면
                System.out.println("0원 이하는 허용되지 않습니다."); //메시지 출력
                return null; //null 리턴
            }
            return amount; //amount 값이 0보다 크다면 amount 리턴
        } catch (NumberFormatException e) { //예외 발생시
            System.out.println(ex); //오류 메시지 출력
            return null; //null 리턴
        }
    }
    
    private static boolean checkpwd(BankAccount accts, String pwd) {
    	try {
            int inputPwd = Integer.parseInt(pwd);
            return accts.getPwd() == inputPwd;
        } catch (NumberFormatException e) {
            System.out.println("숫자만 입력 가능합니다.");
            return false;
        }
    }
    
    public static void main(String[] args) {
    	BankAccount ac1 = new BankAccount(); //생성자1 사용
    	BankAccount ac2 = new BankAccount("Alice"); //생성자2 사용
    	BankAccount ac3 = new BankAccount("Bob",5000); //생성자3 사용
    	BankAccount[] accts = {ac1, ac2, ac3}; //accts 배열에 ac1 ac2 ac3 객체 저장
    	
    	while (true) { //무한반복
    		int acs = selectAccount(accts); //selectAccount 메소드 이용해 접근할 계좌 선택 (리턴받은 정수를 acs에 저장)
    		if (acs == -1) { //-1 이라면 프로그램 종료
    			System.out.println("프로그램을 종료합니다.");
    			break;
    		}
    		if (acs < 0) continue; //입력값이 -1이 아닌 음수라면 다시 반복문 처음으로
    		
    		while (true) { //무한반복
    			System.out.printf("\n[선택된 계좌] %s\n", accts[acs]); //선택한 계좌 출력
    			int choice = menu(); //menu()메소드 이용하여 리턴받은 값을 choice에 저장
    			if (choice == 0) break; //choice값이 0 : 뒤로가기 -> 반복문 탈출
    			switch (choice) { //0이 아닌경우
    				case 1: { //1이라면 //Interger 사용 이유? null을 입력받을 수 있게 하기 위해서
    					Integer amt = readAmount("입금"); //Interger 자료형 amt(금액) 변수 생성 (readAmount 메소드 이용하여 음수인지 아닌지 판단)
    					if(amt == null) //null -> 입력값이 음수
    						break; //반복문 탈출
    					accts[acs].deposit(amt); //아니면 deposit 메소드 사용하여 amt 입금
    					System.out.printf("입금 완료. 현재 잔액: %d원\n", accts[acs].getBalance()); //입금 출력
    					break;
    				}
    				case 2: { //2이라면
    					String password = prompt("비밀번호를 입력하시오. (정수 4자리)\n>> ");
    					if(!checkpwd(accts[acs],password)) {
    						System.out.println("잘못된 비밀번호 입니다.");
    						break;
    					}
    					System.out.printf("비밀번호 확인 완료되었습니다.");
    				    Integer amt = readAmount("출금"); //Interger 자료형 amt(금액) 변수 생성 (readAmount 메소드 이용하여 음수인지 아닌지 판단)
    				    if (amt == null) break; //null -> 입력값이 음수

    				    boolean ok = accts[acs].withdraw(amt); //아니면 withdraw 메소드 사용하여 amt 출금(balance-amt) 및 true false 반환받음
    				    if (ok) { //true라면
    				        System.out.printf("출금 완료. 현재 잔액: %d원\n", accts[acs].getBalance()); //출금 출력 
    				    }
    					break; //false라면 반복문 탈출
    				}
    				case 3: { //3이라면
    					System.out.println("----- 통장 정리(잔액 조회) -----"); 
    	                System.out.println(accts[acs]); //toString 메소드 호출
    	                System.out.println("--------------------------------");
    	                break; //반복문 탈출
    				}
    				default:
    					System.out.println(ex); //도 아니라면 오류 출력
    			}
    		}
    	}
    }
}
